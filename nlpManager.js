// Module de gestion du bouton NLP - Klipboard by Koeki
class NLPManager {
  constructor(mainExtractor) {
    this.main = mainExtractor;
    this.isProcessing = false;
    console.log('üîß NLPManager: Module initialis√©');
  }

  // Test complet du bouton NLP avec gestion des 3 √©tats
  async testNLPButton() {
    if (this.isProcessing) {
      this.main.updateInspectorResults('‚ö†Ô∏è Traitement NLP d√©j√† en cours');
      return false;
    }

    this.isProcessing = true;
    this.main.logDebug('=== TEST BOUTON NLP AM√âLIOR√â ===', 'warning');
    this.main.clearInspectorResults();
    
    try {
      // 1. Chercher le conteneur NLP
      const nlpContainer = this.findNLPContainer();
      
      if (nlpContainer) {
        const currentContent = nlpContainer.textContent.trim();
        
        // V√©rifier si d√©j√† g√©n√©r√© (√©tat 3)
        if (this.isNLPAlreadyGenerated(currentContent)) {
          this.main.updateInspectorResults('‚úÖ Entit√©s NLP d√©j√† g√©n√©r√©es !');
          this.main.updateInspectorResults(`Contenu: ${currentContent.substring(0, 100)}...`);
          return true;
        }
        
        // V√©rifier si en cours de g√©n√©ration (√©tat 2)
        if (this.isNLPGenerating(currentContent)) {
          this.main.updateInspectorResults('‚è≥ G√©n√©ration d√©j√† en cours...');
          return await this.waitForNLPCompletion(nlpContainer);
        }
        
        // √âtat 1 : Bouton pas encore cliqu√©
        this.main.updateInspectorResults('üéØ Bouton NLP √† cliquer');
      }
      
      // 2. Chercher et cliquer sur le bouton
      const nlpButton = this.findNLPButton();
      
      if (!nlpButton) {
        this.main.updateInspectorResults('‚ùå Bouton NLP non trouv√©');
        return false;
      }
      
      // 3. Processus complet de clic et attente
      return await this.clickAndWaitNLP(nlpButton, nlpContainer);
      
    } finally {
      this.isProcessing = false;
    }
  }

  // Trouver le conteneur des entit√©s NLP
  findNLPContainer() {
    const selectors = [
      '#load_entities',
      '#entities_btn', 
      '[id*="entities"]',
      '[class*="entities"]',
      '#liste_entites_nommes'
    ];
    
    for (const selector of selectors) {
      const element = document.querySelector(selector);
      if (element) {
        this.main.updateInspectorResults(`Container NLP trouv√©: ${selector}`);
        return element;
      }
    }
    
    this.main.updateInspectorResults('‚ùå Container NLP non trouv√©');
    return null;
  }

  // V√©rifier si les entit√©s sont d√©j√† g√©n√©r√©es (√©tat 3)
  isNLPAlreadyGenerated(content) {
    const indicators = [
      'entreprises', 'ensemble', 'co√ªts', 'normes',
      'infog√©rance', 'accroissement', 'utilisateurs',
      'Les entit√©s NLP sont extraites',
      'syst√®mes', '√©quipes', '√©volutions', 'gr√¢ce'
    ];
    
    const hasIndicators = indicators.some(indicator => 
      content.toLowerCase().includes(indicator)
    );
    
    const hasSubstantialContent = content.length > 200;
    const notInProgress = !content.includes('Analyse de la SERP lanc√©e') && 
                         !content.includes('Obtenir les entit√©s');
    
    return hasIndicators && hasSubstantialContent && notInProgress;
  }

  // V√©rifier si la g√©n√©ration est en cours (√©tat 2)
  isNLPGenerating(content) {
    return content.includes('Analyse de la SERP lanc√©e') || 
           content.includes('R√©sultats dans') ||
           content.includes('minutes');
  }

  // Trouver le bouton NLP (√©tat 1)
  findNLPButton() {
    // Strat√©gie 1: Chercher par texte sp√©cifique
    const textButtons = Array.from(document.querySelectorAll('button, [role="button"], .commande, span')).filter(btn => {
      const text = btn.textContent.toLowerCase();
      return text.includes('obtenir les entit√©s') && text.includes('nlp');
    });
    
    if (textButtons.length > 0) {
      this.main.updateInspectorResults(`Bouton trouv√© par texte: "${textButtons[0].textContent.trim()}"`);
      return textButtons[0];
    }
    
    // Strat√©gie 2: Chercher par ID sp√©cifique
    const idSelectors = ['#toggleButton', '[id*="toggle"]', '[id*="entities"]'];
    for (const selector of idSelectors) {
      const element = document.querySelector(selector);
      if (element && element.textContent.toLowerCase().includes('entit√©s')) {
        this.main.updateInspectorResults(`Bouton trouv√© par ID: ${selector}`);
        return element;
      }
    }
    
    // Strat√©gie 3: Chercher dans le container NLP
    const nlpContainer = this.findNLPContainer();
    if (nlpContainer) {
      const innerButtons = nlpContainer.querySelectorAll('button, span[class*="commande"], [onclick]');
      for (const btn of innerButtons) {
        if (btn.textContent.toLowerCase().includes('obtenir')) {
          this.main.updateInspectorResults(`Bouton trouv√© dans container: "${btn.textContent.trim()}"`);
          return btn;
        }
      }
    }
    
    // Strat√©gie 4: Chercher par classe commande
    const commandeButtons = document.querySelectorAll('.commande');
    for (const btn of commandeButtons) {
      if (btn.textContent.toLowerCase().includes('nlp') || btn.textContent.toLowerCase().includes('entit√©s')) {
        this.main.updateInspectorResults(`Bouton trouv√© par classe commande: "${btn.textContent.trim()}"`);
        return btn;
      }
    }
    
    return null;
  }

  // Cliquer et attendre la g√©n√©ration NLP
  async clickAndWaitNLP(button, container) {
    this.main.updateInspectorResults(`üéØ Clic sur: "${button.textContent.trim()}"`);
    
    // Surligner le bouton
    this.highlightButton(button, 'processing');
    
    // Enregistrer l'√©tat avant clic
    const beforeContent = container ? container.textContent : '';
    
    // Cliquer
    try {
      button.click();
      this.main.updateInspectorResults('‚úÖ Bouton cliqu√©');
    } catch (error) {
      this.main.updateInspectorResults(`‚ùå Erreur clic: ${error.message}`);
      this.highlightButton(button, 'error');
      return false;
    }
    
    // Attendre le changement d'√©tat (passage √† l'√©tat 2)
    await this.main.wait(2000);
    
    // V√©rifier si on est pass√© en mode "g√©n√©ration"
    const updatedContainer = this.findNLPContainer();
    if (updatedContainer) {
      const newContent = updatedContainer.textContent;
      
      if (this.isNLPGenerating(newContent)) {
        this.main.updateInspectorResults('‚è≥ G√©n√©ration lanc√©e !');
        this.highlightButton(button, 'processing');
        
        // Attendre la completion
        const result = await this.waitForNLPCompletion(updatedContainer);
        this.highlightButton(button, result ? 'success' : 'warning');
        return result;
      }
    }
    
    this.main.updateInspectorResults('‚ö†Ô∏è Pas de changement d√©tect√© apr√®s clic');
    this.highlightButton(button, 'warning');
    return false;
  }

  // Attendre que la g√©n√©ration NLP soit termin√©e
  async waitForNLPCompletion(container) {
    this.main.updateInspectorResults('‚è≥ Attente completion NLP...');
    
    return new Promise((resolve) => {
      let attempts = 0;
      const maxAttempts = 180; // 3 minutes max
      
      const checkInterval = setInterval(() => {
        attempts++;
        const currentContent = container.textContent;
        
        // V√©rifier si termin√© (√©tat 3)
        if (this.isNLPAlreadyGenerated(currentContent)) {
          this.main.updateInspectorResults(`‚úÖ NLP g√©n√©r√©es apr√®s ${attempts} secondes !`);
          this.main.updateInspectorResults(`Entit√©s trouv√©es: ${this.countNLPEntities(currentContent)}`);
          clearInterval(checkInterval);
          resolve(true);
          return;
        }
        
        // Afficher le progr√®s
        if (attempts % 10 === 0) {
          this.main.updateInspectorResults(`‚è≥ ${attempts}s √©coul√©es...`);
        }
        
        // Timeout
        if (attempts >= maxAttempts) {
          this.main.updateInspectorResults('‚ö†Ô∏è Timeout - G√©n√©ration trop longue');
          clearInterval(checkInterval);
          resolve(false);
        }
      }, 1000);
    });
  }

  // Compter le nombre d'entit√©s NLP trouv√©es
  countNLPEntities(content) {
    // Compter les mots significatifs (approximation)
    const words = content.split(/\s+/).filter(word => 
      word.length > 3 && 
      !word.includes('NLP') && 
      !word.includes('entit√©s') &&
      !word.includes('extraites')
    );
    return Math.min(words.length, 50);
  }

  // Surligner le bouton avec code couleur
  highlightButton(button, status) {
    const styles = {
      processing: { border: '3px solid orange', boxShadow: '0 0 15px orange' },
      success: { border: '3px solid green', boxShadow: '0 0 15px green' },
      warning: { border: '3px solid yellow', boxShadow: '0 0 15px yellow' },
      error: { border: '3px solid red', boxShadow: '0 0 15px red' }
    };
    
    const style = styles[status] || styles.processing;
    button.style.border = style.border;
    button.style.boxShadow = style.boxShadow;
  }

  // Extraire le contenu NLP g√©n√©r√©
  extractNLPContent() {
    const container = this.findNLPContainer();
    if (!container) {
      return null;
    }
    
    const content = container.textContent.trim();
    
    if (this.isNLPAlreadyGenerated(content)) {
      this.main.logDebug('Extraction contenu NLP', 'success');
      return content;
    }
    
    return null;
  }

  // V√©rifier l'√©tat actuel du NLP
  getCurrentNLPStatus() {
    const container = this.findNLPContainer();
    if (!container) {
      return 'not_found';
    }
    
    const content = container.textContent.trim();
    
    if (this.isNLPAlreadyGenerated(content)) {
      return 'generated';
    } else if (this.isNLPGenerating(content)) {
      return 'generating';
    } else {
      return 'ready_to_click';
    }
  }

  // Forcer la g√©n√©ration NLP (m√™me si d√©j√† g√©n√©r√©)
  async forceNLPGeneration() {
    this.main.logDebug('=== FORCE G√âN√âRATION NLP ===', 'warning');
    
    const button = this.findNLPButton();
    if (!button) {
      return false;
    }
    
    const container = this.findNLPContainer();
    return await this.clickAndWaitNLP(button, container);
  }
}

console.log('üîß NLPManager: Module charg√©');